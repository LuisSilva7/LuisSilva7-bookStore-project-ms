version: '3.8'

services:
  # ====================
  # BDs
  # ====================

  mysql_book:
    container_name: ms_mysql_book
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_book:/var/lib/mysql
      - ./init-book.sql:/docker-entrypoint-initdb.d/init-book.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_cart:
    container_name: ms_mysql_cart
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3308:3306"
    volumes:
      - mysql_data_cart:/var/lib/mysql
      - ./init-cart.sql:/docker-entrypoint-initdb.d/init-cart.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_composition:
    container_name: ms_mysql_composition
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3309:3306"
    volumes:
      - mysql_data_composition:/var/lib/mysql
      - ./init-composition.sql:/docker-entrypoint-initdb.d/init-composition.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_order:
    container_name: ms_mysql_order
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3310:3306"
    volumes:
      - mysql_data_order:/var/lib/mysql
      - ./init-order.sql:/docker-entrypoint-initdb.d/init-order.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_shipping:
    container_name: ms_mysql_shipping
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3311:3306"
    volumes:
      - mysql_data_shipping:/var/lib/mysql
      - ./init-shipping.sql:/docker-entrypoint-initdb.d/init-shipping.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_user:
    container_name: ms_mysql_user
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3312:3306"
    volumes:
      - mysql_data_user:/var/lib/mysql
      - ./init-user.sql:/docker-entrypoint-initdb.d/init-user.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  mysql_order_query:
    container_name: ms_mysql_order_query
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: username
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_order_query:/var/lib/mysql
      - ./init-order-query.sql:/docker-entrypoint-initdb.d/init-order-query.sql
    networks:
      - microservices-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "username", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 10

  # ====================
  # KAFKA / ZOOKEEPER
  # ====================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc -w 2 zookeeper 2181 | grep imok"]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 10

  # ====================
  # MICROSERVICES
  # ====================

  config-server:
    container_name: ms_config_server
    build:
      context: ../../bookStore-backend/services/config-server
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      - spring.profiles.active=native
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  discovery:
    container_name: ms_discovery
    build:
      context: ../../bookStore-backend/services/discovery
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10

  user:
    container_name: ms_user
    build:
      context: ../../bookStore-backend/services/user
      dockerfile: Dockerfile
    ports:
      - "8050:8050"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_user:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_user:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "java", "-jar", "app.jar"]

  book:
    container_name: ms_book
    build:
      context: ../../bookStore-backend/services/book
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_book:
        condition: service_healthy
      user:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_book:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "user:8050", "--", "./wait-for-it.sh", "kafka:9092", "--", "java", "-jar", "app.jar"]

  cart:
    container_name: ms_cart
    build:
      context: ../../bookStore-backend/services/cart
      dockerfile: Dockerfile
    ports:
      - "8070:8070"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_cart:
        condition: service_healthy
      book:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8070/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_cart:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "book:8090", "--", "./wait-for-it.sh", "kafka:9092", "--", "java", "-jar", "app.jar"]

  order:
    container_name: ms_order
    build:
      context: ../../bookStore-backend/services/order
      dockerfile: Dockerfile
    ports:
      - "8060:8060"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_order:
        condition: service_healthy
      cart:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8060/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_order:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "cart:8070", "--", "./wait-for-it.sh", "kafka:9092", "--", "java", "-jar", "app.jar"]

  shipping:
    container_name: ms_shipping
    build:
      context: ../../bookStore-backend/services/shipping
      dockerfile: Dockerfile
    ports:
      - "8040:8040"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_shipping:
        condition: service_healthy
      order:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_shipping:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "order:8060", "--", "./wait-for-it.sh", "kafka:9092", "--", "java", "-jar", "app.jar"]

  composition:
    container_name: ms_composition
    build:
      context: ../../bookStore-backend/services/composition
      dockerfile: Dockerfile
    ports:
      - "8010:8010"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_composition:
        condition: service_healthy
      shipping:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_composition:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "shipping:8040", "--", "java", "-jar", "app.jar"]

  order-query:
    container_name: ms_order_query
    build:
      context: ../../bookStore-backend/services/order-query
      dockerfile: Dockerfile
    ports:
      - "8020:8020"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      mysql_order_query:
        condition: service_healthy
      kafka:
        condition: service_healthy
      composition:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "mysql_order_query:3306", "--", "./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "kafka:9092", "--", "./wait-for-it.sh", "composition:8010", "--", "java", "-jar", "app.jar"]

  gateway:
    container_name: ms_gateway
    build:
      context: ../../bookStore-backend/services/gateway
      dockerfile: Dockerfile
    ports:
      - "80:8222"
    depends_on:
      config-server:
        condition: service_healthy
      discovery:
        condition: service_healthy
      user:
        condition: service_healthy
      book:
        condition: service_healthy
      cart:
        condition: service_healthy
      order:
        condition: service_healthy
      shipping:
        condition: service_healthy
      composition:
        condition: service_healthy
      order-query:
        condition: service_healthy
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/actuator/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: ["./wait-for-it.sh", "config-server:8888", "--", "./wait-for-it.sh", "discovery:8761", "--", "./wait-for-it.sh", "user:8050", "--", "./wait-for-it.sh", "book:8090", "--", "./wait-for-it.sh", "cart:8070", "--", "./wait-for-it.sh", "order:8060", "--", "./wait-for-it.sh", "shipping:8040", "--", "./wait-for-it.sh", "composition:8010", "--", "./wait-for-it.sh", "order-query:8020", "--", "java", "-jar", "app.jar"]

networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data_book:
  mysql_data_cart:
  mysql_data_composition:
  mysql_data_order:
  mysql_data_shipping:
  mysql_data_user:
  mysql_data_order_query: